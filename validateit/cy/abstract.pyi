import typing as t
from abc import ABC

class Validator(ABC):
    __slots__: t.Tuple[str, ...]
    def __init__(self, *, alias: str = None, replace: bool = False, **kw) -> None: ...
    def __call__(self, value: t.Any) -> t.Optional[t.Any]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: t.Any) -> bool: ...
    def params(self) -> t.Iterator[t.Tuple[str, t.Any]]: ...
    def dump(self) -> t.Dict[str, t.Any]: ...
    @staticmethod
    def load(
        params: t.Dict[str, t.Any],
        update: t.Dict[str, t.Dict] = None,
        unset: t.Dict[str, t.Container] = None,
    ) -> Validator: ...
    def clone(
        self, update: t.Dict[str, t.Dict] = None, unset: t.Dict[str, t.Container] = None
    ) -> Validator: ...
